# ZooKeeper Configuration Loader Job
# This job loads all microservice configurations into ZooKeeper before services start
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config-loader-script
  namespace: mysillydreams-dev
data:
  load-configs.sh: |
    #!/bin/bash
    set -e

    echo "Starting ZooKeeper configuration loading..."

    # Wait for ZooKeeper to be ready
    echo "Waiting for ZooKeeper to be ready..."
    for i in {1..60}; do
      if kubectl get pods -n mysillydreams-dev -l app=zookeeper --no-headers | grep -q "1/1"; then
        echo "ZooKeeper is ready!"
        break
      fi
      echo "ZooKeeper not ready, waiting... (attempt $i/60)"
      sleep 5
    done

    # Get ZooKeeper pod name
    ZK_POD=$(kubectl get pods -n mysillydreams-dev -l app=zookeeper --no-headers | awk '{print $1}')
    echo "Using ZooKeeper pod: $ZK_POD"

    # Function to create ZooKeeper path
    create_zk_path() {
      local path=$1
      local data=$2
      echo "Creating ZooKeeper path: $path"

      kubectl exec -n mysillydreams-dev $ZK_POD -- \
        zookeeper-shell localhost:2181 create "$path" "$data" 2>/dev/null || \
      kubectl exec -n mysillydreams-dev $ZK_POD -- \
        zookeeper-shell localhost:2181 set "$path" "$data"
    }

    # Function to create individual property
    create_zk_property() {
      local service=$1
      local property=$2
      local value=$3
      local path="/config/$service/$property"

      echo "Setting property: $path = $value"
      kubectl exec -n mysillydreams-dev $ZK_POD -- \
        zookeeper-shell localhost:2181 create "$path" "$value" 2>/dev/null || \
      kubectl exec -n mysillydreams-dev $ZK_POD -- \
        zookeeper-shell localhost:2181 set "$path" "$value"
    }

    # Create base paths for Spring Cloud ZooKeeper
    echo "Creating base ZooKeeper paths..."
    kubectl exec -n mysillydreams-dev $ZK_POD -- \
      zookeeper-shell localhost:2181 create /config "" 2>/dev/null || true
    kubectl exec -n mysillydreams-dev $ZK_POD -- \
      zookeeper-shell localhost:2181 create /config/auth-service "" 2>/dev/null || true
    kubectl exec -n mysillydreams-dev $ZK_POD -- \
      zookeeper-shell localhost:2181 create /config/api-gateway "" 2>/dev/null || true
    kubectl exec -n mysillydreams-dev $ZK_POD -- \
      zookeeper-shell localhost:2181 create /config/user-service "" 2>/dev/null || true
    kubectl exec -n mysillydreams-dev $ZK_POD -- \
      zookeeper-shell localhost:2181 create /config/admin-server "" 2>/dev/null || true

    # Load Auth Service Configuration as individual properties
    echo "Loading Auth Service configuration as individual properties..."

    # Read the properties file and create individual ZooKeeper nodes
    while IFS='=' read -r key value || [ -n "$key" ]; do
      # Skip empty lines and comments
      [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]] && continue

      # Remove leading/trailing whitespace
      key=$(echo "$key" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      value=$(echo "$value" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

      # Create the property in ZooKeeper
      if [[ -n "$key" && -n "$value" ]]; then
        create_zk_property "auth-service" "$key" "$value"
      fi
    done < /configs/auth-service-config.properties

    # Load API Gateway Configuration as individual properties
    echo "Loading API Gateway configuration as individual properties..."

    # Read the properties file and create individual ZooKeeper nodes
    while IFS='=' read -r key value || [ -n "$key" ]; do
      # Skip empty lines and comments
      [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]] && continue

      # Remove leading/trailing whitespace
      key=$(echo "$key" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      value=$(echo "$value" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

      # Create the property in ZooKeeper
      if [[ -n "$key" && -n "$value" ]]; then
        create_zk_property "api-gateway" "$key" "$value"
      fi
    done < /configs/api-gateway-config.properties

    # Load User Service Configuration as individual properties
    echo "Loading User Service configuration as individual properties..."

    # Read the properties file and create individual ZooKeeper nodes
    while IFS='=' read -r key value || [ -n "$key" ]; do
      # Skip empty lines and comments
      [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]] && continue

      # Remove leading/trailing whitespace
      key=$(echo "$key" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      value=$(echo "$value" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

      # Create the property in ZooKeeper
      if [[ -n "$key" && -n "$value" ]]; then
        create_zk_property "user-service" "$key" "$value"
      fi
    done < /configs/user-service-config.properties

    # Load Admin Server Configuration as individual properties
    echo "Loading Admin Server configuration as individual properties..."

    # Read the properties file and create individual ZooKeeper nodes
    while IFS='=' read -r key value || [ -n "$key" ]; do
      # Skip empty lines and comments
      [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]] && continue

      # Remove leading/trailing whitespace
      key=$(echo "$key" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      value=$(echo "$value" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

      # Create the property in ZooKeeper
      if [[ -n "$key" && -n "$value" ]]; then
        create_zk_property "admin-server" "$key" "$value"
      fi
    done < /configs/admin-server-config.properties

    echo "Configuration loading completed successfully!"

    # Verify configurations are loaded
    echo "Verifying configurations..."
    kubectl exec -n mysillydreams-dev $ZK_POD -- \
      zookeeper-shell localhost:2181 ls /config
    kubectl exec -n mysillydreams-dev $ZK_POD -- \
      zookeeper-shell localhost:2181 ls /config/auth-service

    echo "ZooKeeper configuration loading job completed!"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: zookeeper-config-loader
  namespace: mysillydreams-dev
  labels:
    app: zookeeper-config-loader
    component: configuration
spec:
  template:
    metadata:
      labels:
        app: zookeeper-config-loader
        component: configuration
    spec:
      restartPolicy: OnFailure
      containers:
      - name: config-loader
        image: bitnami/kubectl:latest
        command: ["/bin/bash"]
        args: ["/scripts/load-configs.sh"]
        volumeMounts:
        - name: config-script
          mountPath: /scripts
        - name: config-files
          mountPath: /configs
        env:
        - name: KUBECONFIG
          value: /tmp/kubeconfig
      volumes:
      - name: config-script
        configMap:
          name: zookeeper-config-loader-script
          defaultMode: 0755
      - name: config-files
        configMap:
          name: zookeeper-service-configs
      # Add service account for kubectl access
      serviceAccountName: zookeeper-config-loader

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zookeeper-config-loader
  namespace: mysillydreams-dev

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: mysillydreams-dev
  name: zookeeper-config-loader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: zookeeper-config-loader
  namespace: mysillydreams-dev
subjects:
- kind: ServiceAccount
  name: zookeeper-config-loader
  namespace: mysillydreams-dev
roleRef:
  kind: Role
  name: zookeeper-config-loader
  apiGroup: rbac.authorization.k8s.io
