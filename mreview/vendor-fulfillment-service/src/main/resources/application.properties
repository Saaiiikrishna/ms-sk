spring.application.name=vendor-fulfillment-service

# Spring Datasource
spring.datasource.url=jdbc:postgresql://localhost:5432/vendor_fulfillment_db
spring.datasource.username=user
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Properties
spring.jpa.hibernate.ddl-auto=validate # Flyway will handle schema creation/updates
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
# spring.flyway.baseline-on-migrate=true # Use if initializing on an existing schema

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=vendor-fulfillment-service-group # Default consumer group ID
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false # We use manual ack

# Schema Registry URL (for Avro) - Replace localhost:8081 with your actual Schema Registry URL
spring.kafka.properties.schema.registry.url=http://localhost:8081
spring.kafka.consumer.properties.specific.avro.reader=true

# Producer properties (will be used by Outbox Poller's KafkaTemplate)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer # For Avro
spring.kafka.producer.acks=all # For durability
spring.kafka.producer.properties.enable.idempotence=true # Ensures ordering and no duplicates from producer side

# Topic Names (centralize topic names here)
app.kafka.topic.order-reservation-succeeded=order.reservation.succeeded
app.kafka.topic.vendor-order-assigned=vendor.order.assigned
app.kafka.topic.vendor-order-acknowledged=vendor.order.acknowledged
app.kafka.topic.vendor-order-packed=vendor.order.packed
app.kafka.topic.vendor-order-shipped=vendor.order.shipped
app.kafka.topic.vendor-order-fulfilled=vendor.order.fulfilled
app.kafka.topic.vendor-order-reassigned=vendor.order.reassigned
app.kafka.topic.shipment-notification-requested=shipment.notification.requested
# Add other outbound topics as they are implemented e.g.:

# Outbox Poller Configuration
app.outbox.poller.fixed-delay-ms=5000 # Poll every 5 seconds
app.outbox.poller.batch-size=100 # Max events to process per poll

# Logging
logging.level.com.ecommerce.vendorfulfillmentservice=INFO
logging.level.org.springframework.kafka=INFO
logging.level.org.apache.kafka=WARN # Kafka client internal logs can be verbose

# Resilience4j Configuration
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.slidingWindowSize=10 # Last 10 calls
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.minimumNumberOfCalls=5 # Before CB calculates error rate
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.failureRateThreshold=50 # If 50% of calls fail
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.waitDurationInOpenState=30000 # 30s
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.automaticTransitionFromOpenToHalfOpenEnabled=true
# Consider which exceptions should trigger the circuit breaker (e.g., database connection issues)
# resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.ignoreExceptions=
# resilience4j.circuitbreaker.instances.kafkaOrderEventProcessor.recordExceptions=org.springframework.dao.DataAccessResourceFailureException,java.net.ConnectException

# Micrometer - Actuator
management.endpoints.web.exposure.include=health,info,prometheus,metrics,circuitbreakers
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# Keycloak / OAuth2 Resource Server Properties
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/your-realm # Replace with actual Keycloak realm issuer URI
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri= # Optional: if not discoverable from issuer-uri
