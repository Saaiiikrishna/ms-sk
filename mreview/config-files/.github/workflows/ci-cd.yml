name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Your registry and namespace
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}    # e.g. myregistry.example.com
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build & run tests
        # -B runs in batch mode (non-interactive)
        # -am also makes dependent modules
        run: mvn clean verify -pl order-api,order-core,inventory-api,payment-service -am -B # Added inventory-api and payment-service

  docker:
    name: Build & Push Docker Images
    needs: build # This job runs after 'build' job is successful
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }} # Ensure this secret name matches GitHub repo secrets

      - name: Build and push order-api image
        run: |
          docker build \
            -t $REGISTRY_URL/order-api:${IMAGE_TAG} \
            -f order-api/Dockerfile \
            order-api # Context for the build is the order-api directory
          docker push $REGISTRY_URL/order-api:${IMAGE_TAG}

      - name: Build and push order-core image
        run: |
          docker build \
            -t $REGISTRY_URL/order-core:${IMAGE_TAG} \
            -f order-core/Dockerfile \
            order-core # Context for the build is the order-core directory
          docker push $REGISTRY_URL/order-core:${IMAGE_TAG}

      - name: Build and push inventory-api image
        run: |
          docker build -t ${{ env.REGISTRY_URL }}/inventory-api:${{ env.IMAGE_TAG }} -f inventory-api/Dockerfile inventory-api
          docker push ${{ env.REGISTRY_URL }}/inventory-api:${{ env.IMAGE_TAG }}

      - name: Build and push payment-service image
        run: |
          docker build -t ${{ env.REGISTRY_URL }}/payment-service:${{ env.IMAGE_TAG }} -f payment-service/Dockerfile payment-service
          docker push ${{ env.REGISTRY_URL }}/payment-service:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to Kubernetes (dev)
    needs: docker # This job runs after 'docker' job is successful
    runs-on: ubuntu-latest
    # Add environment for deployment if needed, e.g., for selecting K8s context or namespace
    # environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        # with: # version can be omitted to get latest stable, or specify
          # version: 'latest'

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config # Secure the kubeconfig file

      - name: Deploy order-api
        run: |
          # Using kubectl apply for simplicity. Helm would be more robust.
          # Assumes K8s manifests are in order-api/k8s/ and are self-contained or kustomized.
          # The 'set image' command updates the image in an existing deployment.
          # The 'apply -f' command applies all configurations in the directory.
          # Ensure the deployment names match what's in your K8s manifests.
          kubectl -n dev set image deployment/order-api-deployment order-api=$REGISTRY_URL/order-api:${IMAGE_TAG}
          # If using kustomize:
          # kubectl apply -k order-api/k8s/overlays/dev -n dev
          # Or for plain manifests:
          kubectl -n dev apply -f order-api/k8s/
          kubectl -n dev rollout status deployment/order-api-deployment --timeout=120s


      - name: Deploy order-core
        run: |
          kubectl -n dev set image deployment/order-core-deployment order-core=$REGISTRY_URL/order-core:${IMAGE_TAG}
          kubectl -n dev apply -f order-core/k8s/
          kubectl -n dev rollout status deployment/order-core-deployment --timeout=120s

      - name: Deploy inventory-api
        run: |
          kubectl -n dev set image deployment/inventory-api inventory-api=${{ env.REGISTRY_URL }}/inventory-api:${{ env.IMAGE_TAG }}
          kubectl -n dev apply -f inventory-api/k8s/
          kubectl -n dev rollout status deployment/inventory-api --timeout=120s # Added rollout status

      - name: Deploy payment-service
        run: |
          kubectl -n dev set image deployment/payment-service payment-service=${{ env.REGISTRY_URL }}/payment-service:${{ env.IMAGE_TAG }}
          kubectl -n dev apply -f payment-service/k8s/
          kubectl -n dev rollout status deployment/payment-service --timeout=120s

  smoke-test:
    name: End-to-End Smoke Test
    needs: deploy # This job runs after 'deploy' job is successful
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Add steps to install kafkacat or other necessary tools if scripts/verify-smoke.sh needs them
      # - name: Install kafkacat
      #   run: sudo apt-get update && sudo apt-get install -y kafkacat

      - name: Run smoke tests
        # Pass necessary URLs/secrets as environment variables to the script if needed
        # Example:
        # env:
        #   ORDER_API_URL: http://order-api.dev.example.com # Ingress URL
        #   ORDER_CORE_INTERNAL_URL: http://order-core.dev.svc.cluster.local # Internal K8s service URL (if script runs in-cluster or has access)
        #   KAFKA_BROKERS_DEV: ${{ secrets.KAFKA_BROKERS_DEV }}
        run: bash scripts/verify-smoke.sh
        # The script needs to be executable: chmod +x scripts/verify-smoke.sh in repo or here
        # Or ensure it's created with execute permissions.
        # If script needs to be made executable:
        # - name: Make smoke test script executable
        #   run: chmod +x scripts/verify-smoke.sh
        # - name: Run smoke tests
        #   run: ./scripts/verify-smoke.sh

---
# Notes from template:
# Secrets to configure in GitHub repo settings:
# - REGISTRY_URL, REGISTRY_USER, REGISTRY_PASSWORD for Docker registry.
# - KUBECONFIG (base64-encoded or literal kubeconfig file) for kubectl.
#
# Smoke-test script considerations:
# - Needs access to deployed services (Order-API, Order-Core) and Kafka.
# - URLs might need to be dynamic based on dev environment (e.g., Ingress host).
#
# Helm deployment (alternative to kubectl apply):
# - name: Deploy order-api via Helm
#   run: |
#     helm upgrade --install order-api ./order-api/helm \
#       --namespace dev \
#       --set image.repository=$REGISTRY_URL/order-api \
#       --set image.tag=${IMAGE_TAG} \
#       --create-namespace \
#       --wait --timeout 5m0s
# - name: Deploy order-core via Helm
#   run: |
#     helm upgrade --install order-core ./order-core/helm \
#       --namespace dev \
#       --set image.repository=$REGISTRY_URL/order-core \
#       --set image.tag=${IMAGE_TAG} \
#       --create-namespace \
#       --wait --timeout 5m0s
