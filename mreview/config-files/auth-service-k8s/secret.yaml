apiVersion: v1
kind: Secret
metadata:
  name: auth-service-secrets
  namespace: mysillydreams # Assuming a namespace, adjust if needed
type: Opaque
stringData: # Use stringData for readability; values are still base64 encoded by K8s.
  # --- Database Credentials ---
  DB_USER: "authuser_placeholder" # As per application.yml default expectation or your value
  DB_PASS: "authpassword_placeholder_s3cr3t" # As per application.yml default expectation or your value
  DB_NAME: "authdb_placeholder" # As per application.yml default expectation or your value
  DB_HOST: "postgresql-headless.database" # Example: K8s service name for DB
  DB_PORT: "5432"

  # --- Keycloak Credentials ---
  KEYCLOAK_SECRET: "keycloak_client_secret_placeholder" # The secret for 'auth-service-client'

  # --- JWT Secret ---
  JWT_SECRET: "VeryChangeThisSuperSecretKeyForProductionEnvironmentMinimum256BitsLongPlaceholder" # Must match generation logic & be strong

  # --- Kafka (if using SASL or other secrets) ---
  # KAFKA_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"

# Note: For actual production deployments, consider using a more secure way to manage secrets,
# such as HashiCorp Vault, Sealed Secrets, or cloud provider's KMS and secret management services.
# These values should be populated via CI/CD or a secure provisioning process, not committed directly if real.
# The '.placeholder' suffix is to emphasize these are not real secrets.
# The DB_HOST and DB_PORT are also here as they are often part of connection string sensitive info.
# If DB_NAME, DB_HOST, DB_PORT are not sensitive, they can be in ConfigMap.
# For this exercise, grouping them with DB_USER/DB_PASS in secrets.
