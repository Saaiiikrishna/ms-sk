spring:
  application:
    name: auth-service
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:authdb} # Added DB_PORT and DB_NAME for more flexibility
    username: ${DB_USER:postgres} # Changed default to postgres
    password: ${DB_PASS:0000} # Changed default to 0000
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update # IMPORTANT: Use "validate" or "none" in production. Schema changes should be managed by Liquibase/Flyway.
    show-sql: false # Set to true for debugging, false for production
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true # If show-sql is true, this will format it nicely
  # Liquibase for database migrations (recommended for production)
  # liquibase:
  #   change-log: classpath:/db/changelog/db.changelog-master.yaml
  #   enabled: true



# Keycloak configuration for admin client operations
keycloak:
  realm: ${KEYCLOAK_REALM:MySillyDreams-Realm}
  auth-server-url: ${KEYCLOAK_URL:http://localhost:8080}
  admin-client:
    client-id: ${KEYCLOAK_ADMIN_CLIENT_ID:admin-cli}
    client-secret: ${KEYCLOAK_ADMIN_CLIENT_SECRET:}
    username: ${KEYCLOAK_ADMIN_USERNAME:admin}
    password: ${KEYCLOAK_ADMIN_PASSWORD:admin}

kafka:
  bootstrap-servers: ${KAFKA_BROKER:localhost:9092}
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    properties:
      spring.json.add.type.headers: false # To avoid adding __TypeId__ headers if not needed by consumer
  # consumer: # Example if this service also consumes events
    # group-id: auth-service-group
    # key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    # value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    # properties:
    #   spring.json.trusted.packages: "*" # Or specific packages

jwt:
  secret: ${JWT_SECRET:ChangeThisVerySecretKeyForProductionEnvironmentMinimum256Bits} # Placeholder, MUST be overridden
  expiration-ms: 3600000 # 1 hour
  # For asymmetric keys (RS256), you'd configure paths to key files or JWKS URI
  # public-key-location: "classpath:jwt/public.key"
  # private-key-location: "classpath:jwt/private.key"


server:
  port: 8081
  # For graceful shutdown
  shutdown: graceful
  # If behind a proxy, configure forwarded headers
  # forward-headers-strategy: framework # Or native, none

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus # Expose health, info, and prometheus (if micrometer-registry-prometheus is added)
  endpoint:
    health:
      show-details: when_authorized # Or "always" during dev, "never" for prod if sensitive
      # Probes can be enabled for Kubernetes
      probes:
        enabled: true
  # metrics: # Example for Prometheus if added
    # tags:
      # application: ${spring.application.name}

logging:
  level:
    root: INFO
    com.mysillydreams.auth: DEBUG # More specific logging for our app
    org.springframework.security: INFO # Can be DEBUG for troubleshooting security
    org.keycloak: INFO # Can be DEBUG for troubleshooting Keycloak integration
    # org.hibernate.SQL: DEBUG # To see SQL queries (if show-sql is false)
    # org.hibernate.type.descriptor.sql.BasicBinder: TRACE # To see bound parameters (if show-sql is false)

# Application specific properties
app:
  simple-encryption:
    # Secret key for SimpleEncryptionService (e.g., for TOTP secrets).
    # MUST be overridden with a strong, randomly generated key in production (16, 24, or 32 bytes for AES-128/192/256).
    # Example: openssl rand -hex 32
    secret-key: ${APP_SIMPLE_ENCRYPTION_SECRET_KEY:DefaultP@ssw0rdForSimpleEncryptNeedsToBe32BytesLong!}

  # MFA Configuration
  mfa:
    issuer-name: ${APP_MFA_ISSUER_NAME:MySillyDreamsPlatform}

  # Internal API Configuration
  internal-api:
    secret-key: ${APP_INTERNAL_API_SECRET_KEY:ChangeThisInternalApiSecretKeyForProduction123456789!}

  # Bootstrap Configuration
  bootstrap:
    enabled: ${APP_BOOTSTRAP_ENABLED:true} # Set to false after first admin is created


# Default Spring profiles
spring.profiles.active: ${SPRING_PROFILES_ACTIVE:default}

---
spring:
  config:
    activate:
      on-profile: kubernetes
  # Kubernetes specific configurations can go here
  # For example, if using Spring Cloud Kubernetes for ConfigMaps/Secrets
  # cloud:
    # kubernetes:
      # secrets:
        # enabled: true
        # sources:
          # - name: auth-service-secrets # Matches K8s Secret name
      # config:
        # enabled: true
        # sources:
          # - name: auth-service-config # Matches K8s ConfigMap name
# Add other profiles as needed (dev, test, prod)
# ---
# spring:
#   config:
#     activate:
#       on-profile: dev
#   jpa:
#     show-sql: true
#   keycloak:
#     ssl-required: none
# ---
# spring:
#   config:
#     activate:
#       on-profile: prod
#   jpa:
#     hibernate:
#       ddl-auto: validate # Safer in prod
#   keycloak:
#     ssl-required: all
#   management:
#     endpoint:
#       health:
#         show-details: never

# For Keycloak Admin Client (if not configured via code)
# keycloak.admin-client:
#   server-url: ${keycloak.auth-server-url}
#   realm: master # Or your app realm if service account has permissions there
#   client-id: admin-cli # Or a dedicated client for this service
#   client-secret: ${KEYCLOAK_ADMIN_CLIENT_SECRET} # If using client secret
#   username: ${KEYCLOAK_ADMIN_USERNAME} # If using user credentials
#   password: ${KEYCLOAK_ADMIN_PASSWORD}
#   grant-type: client_credentials # Or password

# Server Configuration
server:
  port: 8081

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

# Redis Configuration
spring.data.redis:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}
  password: ${REDIS_PASSWORD:}
  database: 0
  timeout: 2000ms
  lettuce:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 0

# Zipkin Configuration
management:
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${MANAGEMENT_ZIPKIN_TRACING_ENDPOINT:http://localhost:9411/api/v2/spans}

# Keycloak Configuration
keycloak:
  server-url: ${KEYCLOAK_SERVER_URL:http://localhost:8180}
  realm: ${KEYCLOAK_REALM:mysillydreams}
  admin:
    username: ${KEYCLOAK_ADMIN_USERNAME:admin}
    password: ${KEYCLOAK_ADMIN_PASSWORD:admin123}

# Spring Boot Admin Configuration
spring.boot.admin.client:
  url: ${SPRING_BOOT_ADMIN_CLIENT_URL:http://localhost:8080}
  instance:
    name: auth-service
    service-url: ${SPRING_BOOT_ADMIN_CLIENT_SERVICE_URL:http://localhost:8081}

# Management endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    redis:
      enabled: true
    db:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
