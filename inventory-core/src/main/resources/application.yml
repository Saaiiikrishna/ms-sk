spring:
  application:
    name: inventory-core
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:inventorydb} # Added DB_PORT and default values
    username: ${DB_USER:inventoryuser} # Added default values
    password: ${DB_PASS:inventorypass} # Added default values
    driver-class-name: org.postgresql.Driver # Good practice to specify
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect # Good practice to specify dialect
        format_sql: true # For debugging, optional
    show-sql: false # For debugging, optional

flyway:
  enabled: true
  baseline-on-migrate: true # Useful for existing schemas not managed by Flyway initially

kafka:
  bootstrap-servers: ${KAFKA_BROKER:localhost:9092} # Added default values
  consumer:
    group-id: inventory-core-group
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    properties:
      specific.avro.reader: true
      schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8081} # Added default values and schema.registry.url for consumer
      # Consider adding auto.offset.reset: earliest or latest
    # Explicitly disable auto-commit as we are using manual acknowledgments in the listener
    enable-auto-commit: false
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    properties:
      schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8081} # Added default values
      # Consider adding acks: all for durability
  topics:
    reservationRequested: order.reservation.requested
    reservationSucceeded: order.reservation.succeeded
    reservationFailed: order.reservation.failed

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,info,prometheus # Added prometheus, common for monitoring
  endpoint:
    health:
      show-details: when_authorized # Or "always" if appropriate security is in place

# Keycloak (if security is enabled, uncomment and configure)
#keycloak:
#  realm: ${KEYCLOAK_REALM:myrealm}
#  auth-server-url: ${KEYCLOAK_URL:http://localhost:8080}/auth
#  resource: ${KEYCLOAK_CLIENT_ID:inventory-core-client}
#  credentials:
#    secret: ${KEYCLOAK_CLIENT_SECRET:your-client-secret}
#  # public-client: false # if using client secret
#  # principal-attribute: preferred_username # or sub

server:
  port: 8082 # Define a port for inventory-core, assuming 8080/8081 might be used

# Logging (example)
logging:
  level:
    root: INFO
    com.mysillydreams.inventorycore: DEBUG
    org.springframework.kafka: INFO
    org.hibernate.SQL: WARN # To avoid excessive SQL logging unless needed
    org.hibernate.type.descriptor.sql: WARN # As above

# Inventory Core specific properties
inventory:
  outbox:
    poll:
      delay: 5000 # ms
      initialDelay: 10000 # ms
