apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog-service-config
  namespace: default # Or your target namespace
data:
  SPRING_PROFILES_ACTIVE: "kubernetes" # Or "prod", "staging", etc.
  SPRING_APPLICATION_NAME: "catalog-service"
  SERVER_PORT: "8082"

  # Kafka Configuration (replace with your actual broker list)
  SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-service:9092" # Example: using internal K8s service name for Kafka
  SPRING_KAFKA_CONSUMER_GROUP_ID: "catalog-service-group"

  # OpenSearch Configuration
  OPENSEARCH_URIS: "http://opensearch-cluster-master:9200" # Example: using internal K8s service name

  # Redis Configuration
  SPRING_REDIS_HOST: "redis-master" # Example: using internal K8s service name for Redis
  SPRING_REDIS_PORT: "6379"

  # Database - only non-sensitive parts like DB name if URL is constructed
  # SPRING_DATASOURCE_URL: "jdbc:postgresql://<db-host>:<db-port>/catalog_db"
  # Better to construct URL from host, port, dbname, and get user/pass from secret.
  # For example, if your Spring Boot app supports these individual properties:
  DB_HOST: "postgresql-service" # Example: K8s service name for PostgreSQL
  DB_PORT: "5432"
  DB_NAME: "catalog_db"

  # JWT Resource Server (if applicable, and if JWK URI is static)
  # SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: "http://keycloak-service/auth/realms/myrealm/protocol/openid-connect/certs"

  # Logging levels (example)
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_LEVEL_COM_MYSILLYDREAMS_CATALOGSERVICE: "INFO" # Or DEBUG for more logs in K8s

  # Application specific topics (these are defaults from application.yml, can be overridden here)
  # APP_KAFKA_TOPIC_CATEGORY_CREATED: "category.created"
  # ... and other topic names if they need to be configurable per environment via ConfigMap.
  # It's often better if these are fixed in code or application.yml unless they truly vary.
---
# Example ConfigMap for application-kubernetes.yml content
# This allows overriding the entire application.yml or parts of it if Spring Boot is configured
# to load externalized configuration from a mounted volume where this ConfigMap's data is projected.
# This is an alternative to setting many individual ENV VARS.
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: catalog-service-app-config-volume
# data:
#   application-kubernetes.yml: |
#     spring:
#       profiles:
#         active: kubernetes
#       kafka:
#         bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS_FROM_ENV:kafka-service.default.svc.cluster.local:9092}
#       # ... other overrides
#     opensearch:
#       uris: ${OPENSEARCH_URIS_FROM_ENV:http://opensearch-cluster-master.default.svc.cluster.local:9200}
#     # ... etc.
#
# Then in Deployment, mount this ConfigMap as a volume and use SPRING_CONFIG_ADDITIONAL_LOCATION
# or SPRING_CONFIG_LOCATION to point to the mounted application-kubernetes.yml.
# env:
#   - name: SPRING_CONFIG_ADDITIONAL_LOCATION
#     value: /mnt/config/application-kubernetes.yml
# volumeMounts:
#   - name: app-config-volume
#     mountPath: /mnt/config
# volumes:
#   - name: app-config-volume
#     configMap:
#       name: catalog-service-app-config-volume
