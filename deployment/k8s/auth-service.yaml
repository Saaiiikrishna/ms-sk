apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  labels:
    app: auth-service
    version: v1
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: auth-service
        image: ${DOCKER_REGISTRY:-mysillydreams-registry.com}/auth-service:${BUILD_TAG:-latest}
        ports:
        - containerPort: 8081
          name: http
        - containerPort: 8081
          name: actuator
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: SPRING_CLOUD_VAULT_ENABLED
          value: "true"
        - name: SPRING_CLOUD_VAULT_HOST
          value: "${VAULT_HOST:-vault.mysillydreams-prod}"
        - name: SPRING_CLOUD_VAULT_PORT
          value: "${VAULT_PORT:-8200}"
        - name: SPRING_CLOUD_VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-token
              key: token
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgresql:5432/${DB_NAME:-mysillydreams_prod}"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: SPRING_REDIS_HOST
          value: "redis"
        - name: SPRING_REDIS_PORT
          value: "6379"
        - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
          value: "http://eureka-server:8761/eureka/"
        - name: LOGGING_FILE_PATH
          value: "/var/log/auth-service"
        - name: JWT_REFRESH_EXPIRATION_HOURS
          value: "168"
        - name: JWT_MAX_CONCURRENT_SESSIONS
          value: "5"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /var/log/auth-service
        - name: config
          mountPath: /app/config
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: auth-service-config
      securityContext:
        fsGroup: 1000
      serviceAccountName: auth-service
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  labels:
    app: auth-service
spec:
  selector:
    app: auth-service
  ports:
  - name: http
    port: 8081
    targetPort: 8081
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service
  labels:
    app: auth-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-service-config
  labels:
    app: auth-service
data:
  application-production.yml: |
    spring:
      application:
        name: auth-service
      cloud:
        vault:
          enabled: true
          authentication: TOKEN
          kv:
            enabled: true
            backend: secret
            default-context: auth-service
      jpa:
        hibernate:
          ddl-auto: validate
        show-sql: false
        properties:
          hibernate:
            dialect: org.hibernate.dialect.PostgreSQLDialect
            format_sql: false
    
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus
      endpoint:
        health:
          show-details: when-authorized
          probes:
            enabled: true
      metrics:
        export:
          prometheus:
            enabled: true
    
    logging:
      level:
        com.mysillydreams.auth: INFO
        org.springframework.security: WARN
        org.hibernate.SQL: WARN
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n"
        file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{50} - %msg%n"
    
    security:
      headers:
        csp:
          enabled: true
        hsts:
          enabled: true
          max-age: 31536000
        frame-options: DENY
        content-type-options: nosniff
        referrer-policy: strict-origin-when-cross-origin
    
    rate-limit:
      default:
        replenish-rate: 10
        burst-capacity: 20
      auth:
        replenish-rate: 5
        burst-capacity: 10
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-service-network-policy
  labels:
    app: auth-service
spec:
  podSelector:
    matchLabels:
      app: auth-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 8081
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8081
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: vault
    ports:
    - protocol: TCP
      port: 8200
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
